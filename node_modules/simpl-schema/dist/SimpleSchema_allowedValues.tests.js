"use strict";

var _SimpleSchema = require("./SimpleSchema");

var _expect = _interopRequireDefault(require("expect"));

var _friendsSchema = _interopRequireDefault(require("./testHelpers/friendsSchema"));

var _testSchema = _interopRequireDefault(require("./testHelpers/testSchema"));

var _expectErrorLength = _interopRequireDefault(require("./testHelpers/expectErrorLength"));

require("@babel/polyfill");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema - allowedValues', function () {
  describe('normal', function () {
    it('valid string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedStrings: 'tuna'
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedStringsArray: ['tuna', 'fish', 'salad']
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedStringsSet: ['tuna', 'fish', 'salad']
      }).toEqual(0); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        friends: [{
          name: 'Bob',
          type: 'best'
        }],
        enemies: []
      }).toEqual(0);
    });
    it('invalid string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedStrings: 'tunas'
      }).toEqual(1); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedStringsArray: ['tuna', 'fish', 'sandwich']
      }).toEqual(1); // Set Or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedStringsSet: ['tuna', 'fish', 'sandwich']
      }).toEqual(1); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        friends: [{
          name: 'Bob',
          type: 'smelly'
        }],
        enemies: []
      }).toEqual(1);
    });
    it('valid number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedNumbers: 1
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedNumbersArray: [1, 2, 3]
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedNumbersSet: [1, 2, 3]
      }).toEqual(0); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        friends: [{
          name: 'Bob',
          type: 'best',
          a: {
            b: 5000
          }
        }],
        enemies: []
      }).toEqual(0);
    });
    it('invalid number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedNumbers: 4
      }).toEqual(1); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedNumbersArray: [1, 2, 3, 4]
      }).toEqual(1); // Set or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        allowedNumbersSet: [1, 2, 3, 4]
      }).toEqual(1); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        friends: [{
          name: 'Bob',
          type: 'best',
          a: {
            b: 'wrong'
          }
        }],
        enemies: []
      }).toEqual(1);
    });
  });
  describe('modifier with $setOnInsert', function () {
    it('valid string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedStrings: 'tuna'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedStringsArray: ['tuna', 'fish', 'salad']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0); // Set or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedStringsSet: ['tuna', 'fish', 'salad']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $setOnInsert: {
          friends: [{
            name: 'Bob',
            type: 'best'
          }],
          enemies: []
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
    });
    it('invalid string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedStrings: 'tunas'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedStringsArray: ['tuna', 'fish', 'sandwich']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1); // Set or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedStringsSet: ['tuna', 'fish', 'sandwich']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $setOnInsert: {
          friends: [{
            name: 'Bob',
            type: 'smelly'
          }],
          enemies: []
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('valid number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedNumbers: 1
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedNumbersArray: [1, 2, 3]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0); // Set or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedNumbersSet: [1, 2, 3]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $setOnInsert: {
          friends: [{
            name: 'Bob',
            type: 'best',
            a: {
              b: 5000
            }
          }],
          enemies: []
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
    });
    it('invalid number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedNumbers: 4
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedNumbersArray: [1, 2, 3, 4]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1); // Set or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          allowedNumbersSet: [1, 2, 3, 4]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $setOnInsert: {
          friends: [{
            name: 'Bob',
            type: 'best',
            a: {
              b: 'wrong'
            }
          }],
          enemies: []
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
  });
  describe('modifier with $set', function () {
    it('valid string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedStrings: 'tuna'
        }
      }, {
        modifier: true
      }).toEqual(0); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedStringsArray: ['tuna', 'fish', 'salad']
        }
      }, {
        modifier: true
      }).toEqual(0); // Set or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedStringsSet: ['tuna', 'fish', 'salad']
        }
      }, {
        modifier: true
      }).toEqual(0); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $set: {
          'friends.$.name': 'Bob'
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $set: {
          'friends.1.name': 'Bob'
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('invalid string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedStrings: 'tunas'
        }
      }, {
        modifier: true
      }).toEqual(1); // Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedStringsArray: ['tuna', 'fish', 'sandwich']
        }
      }, {
        modifier: true
      }).toEqual(1); // Set or Array

      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedStringsSet: ['tuna', 'fish', 'sandwich']
        }
      }, {
        modifier: true
      }).toEqual(1); // Array of objects

      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $set: {
          'friends.$.name': 'Bobby'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_friendsSchema.default, {
        $set: {
          'friends.1.name': 'Bobby'
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('valid number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedNumbers: 1
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedNumbersArray: [1, 2, 3]
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedNumbersSet: [1, 2, 3]
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('invalid number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedNumbers: 4
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedNumbersArray: [1, 2, 3, 4]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          allowedNumbersSet: [1, 2, 3, 4]
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
  });
  describe('getAllowedValuesForKey', function () {
    it('works', function () {
      const allowedValues = ['a', 'b'];
      const schema = new _SimpleSchema.SimpleSchema({
        foo: Array,
        'foo.$': {
          type: String,
          allowedValues
        }
      });
      (0, _expect.default)(schema.getAllowedValuesForKey('foo')).toEqual(allowedValues);
    });
    it('works with set, convert to array', function () {
      const allowedValues = new Set(['a', 'b']);
      const schema = new _SimpleSchema.SimpleSchema({
        foo: Array,
        'foo.$': {
          type: String,
          allowedValues
        }
      });
      const fetchedAllowedValues = schema.getAllowedValuesForKey('foo');
      (0, _expect.default)(fetchedAllowedValues).toInclude('a');
      (0, _expect.default)(fetchedAllowedValues).toInclude('b');
      (0, _expect.default)(fetchedAllowedValues.length).toEqual(2);
    });
    it('returns null when allowedValues key is empty', function () {
      const schema = new _SimpleSchema.SimpleSchema({
        foo: Array,
        'foo.$': {
          type: String
        }
      });
      (0, _expect.default)(schema.getAllowedValuesForKey('foo')).toEqual(null);
    });
  });
});