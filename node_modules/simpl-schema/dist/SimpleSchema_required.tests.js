"use strict";

var _SimpleSchema = require("./SimpleSchema");

var _requiredSchema = _interopRequireDefault(require("./testHelpers/requiredSchema"));

var _testSchema = _interopRequireDefault(require("./testHelpers/testSchema"));

var _friendsSchema = _interopRequireDefault(require("./testHelpers/friendsSchema"));

var _expectValid = _interopRequireDefault(require("./testHelpers/expectValid"));

var _expectErrorLength = _interopRequireDefault(require("./testHelpers/expectErrorLength"));

var _expectRequiredErrorLength = _interopRequireDefault(require("./testHelpers/expectRequiredErrorLength"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema - required', function () {
  describe('normal', function () {
    it('valid', function () {
      (0, _expectValid.default)(_requiredSchema.default, {
        requiredString: 'test',
        requiredBoolean: true,
        requiredNumber: 1,
        requiredDate: new Date(),
        requiredEmail: 'test123@sub.example.edu',
        requiredUrl: 'http://google.com',
        requiredObject: {
          requiredNumber: 1
        },
        optionalObject: {
          requiredString: 'test'
        }
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        requiredString: 'test',
        requiredBoolean: true,
        requiredNumber: 1,
        requiredDate: new Date(),
        requiredEmail: 'test123@sub.example.edu',
        requiredUrl: 'http://google.com',
        requiredObject: {
          requiredNumber: 1
        }
      });
    });
    it('invalid', function () {
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {}).toBe(8);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        requiredString: null,
        requiredBoolean: null,
        requiredNumber: null,
        requiredDate: null,
        requiredEmail: null,
        requiredUrl: null,
        requiredObject: null,
        optionalObject: {
          requiredString: null
        }
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        requiredString: null,
        requiredBoolean: null,
        requiredNumber: null,
        requiredDate: null,
        requiredEmail: null,
        requiredUrl: null,
        requiredObject: null,
        optionalObject: {}
      }).toBe(9); // we should not get an error about optionalObject.requiredString because the whole object is null

      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        requiredString: null,
        requiredBoolean: null,
        requiredNumber: null,
        requiredDate: null,
        requiredEmail: null,
        requiredUrl: null,
        requiredObject: null,
        optionalObject: null
      }).toBe(8); // we should not get an error about optionalObject.requiredString because the whole object is missing

      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        requiredString: null,
        requiredBoolean: null,
        requiredNumber: null,
        requiredDate: null,
        requiredEmail: null,
        requiredUrl: null,
        requiredObject: null
      }).toBe(8);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        requiredString: undefined,
        requiredBoolean: undefined,
        requiredNumber: undefined,
        requiredDate: undefined,
        requiredEmail: undefined,
        requiredUrl: undefined,
        requiredObject: undefined,
        optionalObject: {
          requiredString: undefined
        }
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        requiredString: '',
        requiredBoolean: null,
        requiredNumber: null,
        requiredDate: null,
        requiredEmail: null,
        requiredUrl: null,
        requiredObject: null,
        optionalObject: {
          requiredString: ''
        }
      }).toBe(7);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        requiredString: '   ',
        requiredBoolean: null,
        requiredNumber: null,
        requiredDate: null,
        requiredEmail: null,
        requiredUrl: null,
        requiredObject: null,
        optionalObject: {
          requiredString: '   '
        }
      }).toBe(7); // Array of objects

      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        friends: [{
          name: 'Bob'
        }],
        enemies: [{}]
      }).toBe(2);
    });
  });
  it('requiredByDefault false', function () {
    const schema = new _SimpleSchema.SimpleSchema({
      foo: String
    }, {
      requiredByDefault: false
    });
    (0, _expectRequiredErrorLength.default)(schema, {}).toBe(0);
  });
  it('required option', function () {
    const schema = new _SimpleSchema.SimpleSchema({
      foo: {
        type: String,
        required: true
      }
    }, {
      requiredByDefault: false
    });
    (0, _expectRequiredErrorLength.default)(schema, {}).toBe(1);
  });
  describe('modifier with $set', function () {
    it('valid upsert', function () {
      (0, _expectValid.default)(_requiredSchema.default, {
        $set: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date(),
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          requiredObject: {
            requiredNumber: 1
          },
          optionalObject: {
            requiredString: 'test'
          }
        }
      }, {
        modifier: true,
        upsert: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $set: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date(),
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          requiredObject: {
            requiredNumber: 1
          },
          'optionalObject.requiredString': 'test'
        }
      }, {
        modifier: true,
        upsert: true
      });
      const schema = new _SimpleSchema.SimpleSchema({
        name: {
          type: String
        },
        embed: {
          type: Object
        },
        'embed._id': {
          type: String
        }
      });
      (0, _expectValid.default)(schema, {
        $set: {
          name: 'name'
        }
      }, {
        modifier: true
      });
    });
    it('invalid upsert', function () {
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {}
      }, {
        modifier: true,
        upsert: true
      }).toBe(8); // should be no different with some missing

      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': null
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: null,
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': null
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: undefined,
          requiredBoolean: undefined,
          requiredNumber: undefined,
          requiredDate: undefined,
          requiredEmail: undefined,
          requiredUrl: undefined,
          requiredObject: undefined,
          'optionalObject.requiredString': undefined
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: '',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': ''
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(7);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: '   ',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': '   '
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(7);
    });
    it('valid update', function () {
      // Would not cause DB changes, so should not be an error
      (0, _expectValid.default)(_requiredSchema.default, {
        $set: {}
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $set: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date(),
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          'requiredObject.requiredNumber': 1,
          'optionalObject.requiredString': 'test'
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $set: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date(),
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          requiredObject: {
            requiredNumber: 1
          },
          'optionalObject.requiredString': 'test'
        }
      }, {
        modifier: true
      }); // Array of objects

      (0, _expectValid.default)(_friendsSchema.default, {
        $set: {
          enemies: [{
            name: 'Zach'
          }]
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_friendsSchema.default, {
        $set: {
          'friends.1.name': 'Bob'
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_friendsSchema.default, {
        $set: {
          friends: [{
            name: 'Bob',
            type: 'good'
          }]
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_friendsSchema.default, {
        $set: {
          enemies: [{
            name: 'Zach',
            traits: []
          }]
        }
      }, {
        modifier: true
      });
    });
    it('invalid update', function () {
      // MongoDB will set the props to `undefined`
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: undefined,
          requiredBoolean: undefined,
          requiredNumber: undefined,
          requiredDate: undefined,
          requiredEmail: undefined,
          requiredUrl: undefined,
          requiredObject: undefined,
          'optionalObject.requiredString': undefined
        }
      }, {
        modifier: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: null,
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': null
        }
      }, {
        modifier: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: '',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': ''
        }
      }, {
        modifier: true
      }).toBe(7);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: '   ',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': '   '
        }
      }, {
        modifier: true
      }).toBe(7); // Array of objects

      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $set: {
          enemies: [{}]
        }
      }, {
        modifier: true
      }).toBe(1); // name is required

      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $set: {
          'friends.1.name': null
        }
      }, {
        modifier: true
      }).toBe(1); // type is required

      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $set: {
          friends: [{
            name: 'Bob'
          }]
        }
      }, {
        modifier: true
      }).toBe(1);
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $set: {
          enemies: [{
            name: 'Zach',
            traits: [{}]
          }]
        }
      }, {
        modifier: true
      }).toBe(2);
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $set: {
          enemies: [{
            name: 'Zach',
            traits: [{}, {}]
          }]
        }
      }, {
        modifier: true
      }).toBe(4);
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $set: {
          enemies: [{
            name: 'Zach',
            traits: [{
              name: 'evil'
            }]
          }]
        }
      }, {
        modifier: true
      }).toBe(1);
    });
  });
  describe('modifier with $setOnInsert', function () {
    it('valid upsert', function () {
      (0, _expectValid.default)(_requiredSchema.default, {
        $setOnInsert: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date(),
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          requiredObject: {
            requiredNumber: 1
          },
          optionalObject: {
            requiredString: 'test'
          }
        }
      }, {
        modifier: true,
        upsert: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $setOnInsert: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date(),
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          requiredObject: {
            requiredNumber: 1
          },
          'optionalObject.requiredString': 'test'
        }
      }, {
        modifier: true,
        upsert: true
      });
    });
    it('invalid upsert', function () {
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $setOnInsert: {}
      }, {
        modifier: true,
        upsert: true
      }).toBe(8);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $setOnInsert: {
          requiredString: null,
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': null
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $setOnInsert: {
          requiredString: undefined,
          requiredBoolean: undefined,
          requiredNumber: undefined,
          requiredDate: undefined,
          requiredEmail: undefined,
          requiredUrl: undefined,
          requiredObject: undefined,
          'optionalObject.requiredString': undefined
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $setOnInsert: {
          requiredString: '',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': ''
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(7);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $setOnInsert: {
          requiredString: '   ',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null,
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': '   '
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(7); // Array of objects

      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $setOnInsert: {
          friends: [{
            name: 'Bob'
          }],
          enemies: []
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(1);
    });
  });
  describe('modifier with $set and $setOnInsert', function () {
    it('valid upsert', function () {
      // Some in $set and some in $setOnInsert.
      // Make sure they're merged for validation purposes.
      (0, _expectValid.default)(_requiredSchema.default, {
        $set: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date()
        },
        $setOnInsert: {
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          requiredObject: {
            requiredNumber: 1
          },
          'optionalObject.requiredString': 'test'
        }
      }, {
        modifier: true,
        upsert: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $set: {
          requiredString: 'test',
          requiredBoolean: true,
          requiredNumber: 1,
          requiredDate: new Date()
        },
        $setOnInsert: {
          requiredEmail: 'test123@sub.example.edu',
          requiredUrl: 'http://google.com',
          requiredObject: {
            requiredNumber: 1
          },
          'optionalObject.requiredString': 'test'
        }
      }, {
        modifier: true,
        upsert: true
      });
    });
    it('invalid upsert', function () {
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $setOnInsert: {},
        $set: {}
      }, {
        modifier: true,
        upsert: true
      }).toBe(8);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: null,
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null
        },
        $setOnInsert: {
          requiredEmail: null,
          requiredUrl: null,
          requiredObject: null,
          'optionalObject.requiredString': null
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(9);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: undefined,
          requiredBoolean: undefined,
          requiredNumber: undefined,
          requiredDate: undefined
        },
        $setOnInsert: {
          requiredEmail: undefined,
          requiredUrl: undefined,
          requiredObject: undefined,
          'optionalObject.requiredString': undefined
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(8);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: '',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null
        },
        $setOnInsert: {
          requiredEmail: '',
          requiredUrl: '',
          requiredObject: null,
          'optionalObject.requiredString': ''
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(5);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $set: {
          requiredString: '   ',
          requiredBoolean: null,
          requiredNumber: null,
          requiredDate: null
        },
        $setOnInsert: {
          requiredEmail: '   ',
          requiredUrl: '   ',
          requiredObject: null,
          'optionalObject.requiredString': '   '
        }
      }, {
        modifier: true,
        upsert: true
      }).toBe(5);
    });
  });
  describe('modifier with $unset', function () {
    it('valid', function () {
      // Would not cause DB changes, so should not be an error
      (0, _expectValid.default)(_requiredSchema.default, {
        $unset: {}
      }, {
        modifier: true
      }); // Make sure an optional can be unset when others are required
      // Retest with various values to be sure the value is ignored

      (0, _expectValid.default)(_requiredSchema.default, {
        $unset: {
          anOptionalOne: 1
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $unset: {
          anOptionalOne: null
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $unset: {
          anOptionalOne: ''
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_requiredSchema.default, {
        $unset: {
          optionalObject: ''
        }
      }, {
        modifier: true
      }); // Array of objects

      (0, _expectValid.default)(_friendsSchema.default, {
        $unset: {
          'friends.1.a.b': ''
        }
      }, {
        modifier: true
      });
      (0, _expectValid.default)(_friendsSchema.default, {
        $unset: {
          'friends.1.a.b': 1,
          'friends.2.a.b': 1,
          'friends.3.a.b': 1
        }
      }, {
        modifier: true
      });
    });
    it('invalid', function () {
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $unset: {
          requiredString: 1,
          requiredBoolean: 1,
          requiredNumber: 1,
          requiredDate: 1,
          requiredEmail: 1,
          requiredUrl: 1
        }
      }, {
        modifier: true
      }).toBe(6);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $unset: {
          'optionalObject.requiredString': 1
        }
      }, {
        modifier: true
      }).toBe(1);
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $unset: {
          'requiredObject.requiredNumber': 1
        }
      }, {
        modifier: true
      }).toBe(1); // Array of objects

      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $unset: {
          'friends.1.name': 1
        }
      }, {
        modifier: true
      }).toBe(1);
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $unset: {
          'friends.1.name': 1,
          'friends.2.name': 1,
          'friends.3.name': 1
        }
      }, {
        modifier: true
      }).toBe(3);
    });
  });
  describe('modifier with $rename', function () {
    it('rename from optional key to another key in schema', function () {
      (0, _expectValid.default)(_testSchema.default, {
        $rename: {
          string: 'minMaxString'
        }
      }, {
        modifier: true
      });
    });
    it('rename from optional key to a key not in schema', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $rename: {
          string: 'newString'
        }
      }, {
        modifier: true
      }).toBe(1);
    });
    it('rename from required key', function () {
      (0, _expectRequiredErrorLength.default)(_requiredSchema.default, {
        $rename: {
          requiredString: 'requiredUrl'
        }
      }, {
        modifier: true
      }).toBe(1);
    });
  });
  describe('modifier with $push', function () {
    it('valid', function () {
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $push: {
          friends: {
            name: 'Bob',
            type: 'best'
          }
        }
      }, {
        modifier: true
      }).toBe(0);
    });
    it('invalid', function () {
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $push: {
          friends: {
            name: 'Bob'
          }
        }
      }, {
        modifier: true
      }).toBe(1);
    });
  });
  describe('modifier with $addToSet', function () {
    it('valid', function () {
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $addToSet: {
          friends: {
            name: 'Bob',
            type: 'best'
          }
        }
      }, {
        modifier: true
      }).toBe(0);
    });
    it('invalid', function () {
      (0, _expectRequiredErrorLength.default)(_friendsSchema.default, {
        $addToSet: {
          friends: {
            name: 'Bob'
          }
        }
      }, {
        modifier: true
      }).toBe(1);
    });
  });
});