"use strict";

var _testSchema = _interopRequireDefault(require("./testHelpers/testSchema"));

var _friendsSchema = _interopRequireDefault(require("./testHelpers/friendsSchema"));

var _expectErrorLength = _interopRequireDefault(require("./testHelpers/expectErrorLength"));

var _expectErrorOfTypeLength = _interopRequireDefault(require("./testHelpers/expectErrorOfTypeLength"));

var _SimpleSchema = require("./SimpleSchema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema - max', function () {
  describe('normal', function () {
    it('string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxString: 'nottoolongnottoolong'
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxString: 'toolongtoolongtoolong'
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxStringArray: ['nottoolongnottoolong', 'nottoolongnottoolong']
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxStringArray: ['toolongtoolongtoolong', 'toolongtoolongtoolong']
      }).toEqual(2);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxStringArray: ['nottoolongnottoolong', 'nottoolongnottoolong', 'nottoolongnottoolong']
      }).toEqual(1);
    });
    it('number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumber: 20
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumber: 21
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberCalculated: 20
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberCalculated: 21
      }).toEqual(1);
    });
    it('date', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDate: new Date(Date.UTC(2013, 11, 31))
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDate: new Date(Date.UTC(2014, 0, 1))
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDateCalculated: new Date(Date.UTC(2013, 11, 31))
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDateCalculated: new Date(Date.UTC(2014, 0, 1))
      }).toEqual(1);
    });
  });
  describe('modifier with $setOnInsert', function () {
    it('string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxString: 'nottoolongnottoolong'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxString: 'toolongtoolongtoolong'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxStringArray: ['nottoolongnottoolong', 'nottoolongnottoolong']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxStringArray: ['toolongtoolongtoolong', 'toolongtoolongtoolong']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(2);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxStringArray: ['nottoolongnottoolong', 'nottoolongnottoolong', 'nottoolongnottoolong']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumber: 20
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumber: 21
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumberCalculated: 20
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumberCalculated: 21
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('date', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDate: new Date(Date.UTC(2013, 11, 31))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDate: new Date(Date.UTC(2014, 0, 1))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDateCalculated: new Date(Date.UTC(2013, 11, 31))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDateCalculated: new Date(Date.UTC(2014, 0, 1))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
  });
  describe('modifier with $set or $inc', function () {
    it('string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxString: 'nottoolongnottoolong'
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxString: 'toolongtoolongtoolong'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxStringArray: ['nottoolongnottoolong', 'nottoolongnottoolong']
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxStringArray: ['toolongtoolongtoolong', 'toolongtoolongtoolong']
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxStringArray: ['nottoolongnottoolong', 'nottoolongnottoolong', 'nottoolongnottoolong']
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumber: 20
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumber: 21
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumberCalculated: 20
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumberCalculated: 21
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          maxZero: 1
        }
      }, {
        modifier: true
      }).toEqual(1); // Should not be invalid because we don't know what we're starting from

      (0, _expectErrorLength.default)(_testSchema.default, {
        $inc: {
          maxZero: 5
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('date', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDate: new Date(Date.UTC(2013, 11, 31))
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDate: new Date(Date.UTC(2014, 0, 1))
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDateCalculated: new Date(Date.UTC(2013, 11, 31))
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDateCalculated: new Date(Date.UTC(2014, 0, 1))
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
  });
  describe('modifier with $push', function () {
    it('valid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $push: {
          friends: {
            name: 'Bob',
            type: 'best'
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('invalid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $push: {
          friends: {
            name: 'Bobby',
            type: 'best'
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
  });
  describe('modifier with $push and $each', function () {
    it('valid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $push: {
          friends: {
            $each: [{
              name: 'Bob',
              type: 'best'
            }, {
              name: 'Bob',
              type: 'best'
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('invalid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $push: {
          friends: {
            $each: [{
              name: 'Bob',
              type: 'best'
            }, {
              name: 'Bobby',
              type: 'best'
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
  });
  describe('modifier with $addToSet', function () {
    it('valid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $addToSet: {
          friends: {
            name: 'Bob',
            type: 'best'
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('invalid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $addToSet: {
          friends: {
            name: 'Bobby',
            type: 'best'
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
  });
  describe('modifier with $addToSet and $each', function () {
    it('valid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $addToSet: {
          friends: {
            $each: [{
              name: 'Bob',
              type: 'best'
            }, {
              name: 'Bob',
              type: 'best'
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('invalid', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING, _friendsSchema.default, {
        $addToSet: {
          friends: {
            $each: [{
              name: 'Bob',
              type: 'best'
            }, {
              name: 'Bobby',
              type: 'best'
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
  });
});