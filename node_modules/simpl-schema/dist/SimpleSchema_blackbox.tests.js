"use strict";

var _expectErrorLength = _interopRequireDefault(require("./testHelpers/expectErrorLength"));

var _SimpleSchema = require("./SimpleSchema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
const schema = new _SimpleSchema.SimpleSchema({
  blackBoxObject: {
    type: Object,
    optional: true,
    blackbox: true
  }
});
describe('SimpleSchema - blackbox', function () {
  it('allows an empty object', function () {
    (0, _expectErrorLength.default)(schema, {
      blackBoxObject: {}
    }).toEqual(0);
  });
  it('allows any properties', function () {
    (0, _expectErrorLength.default)(schema, {
      blackBoxObject: {
        foo: 'bar'
      }
    }).toEqual(0);
  });
  it('allows any properties on $set object', function () {
    (0, _expectErrorLength.default)(schema, {
      $set: {
        blackBoxObject: {
          foo: 'bar'
        }
      }
    }, {
      modifier: true
    }).toEqual(0);
  });
  it('allows to $set any subobject', function () {
    (0, _expectErrorLength.default)(schema, {
      $set: {
        'blackBoxObject.foo': 'bar'
      }
    }, {
      modifier: true
    }).toEqual(0);
    (0, _expectErrorLength.default)(schema, {
      $set: {
        'blackBoxObject.1': 'bar'
      }
    }, {
      modifier: true
    }).toEqual(0);
  });
  it('allows to $push into any subobject', function () {
    (0, _expectErrorLength.default)(schema, {
      $push: {
        'blackBoxObject.foo': 'bar'
      }
    }, {
      modifier: true
    }).toEqual(0);
  });
});