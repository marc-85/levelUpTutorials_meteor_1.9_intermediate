"use strict";

var _expectErrorLength = _interopRequireDefault(require("./testHelpers/expectErrorLength"));

var _expectErrorOfTypeLength = _interopRequireDefault(require("./testHelpers/expectErrorOfTypeLength"));

var _friendsSchema = _interopRequireDefault(require("./testHelpers/friendsSchema"));

var _testSchema = _interopRequireDefault(require("./testHelpers/testSchema"));

var _SimpleSchema = require("./SimpleSchema");

var _Address = _interopRequireDefault(require("./testHelpers/Address"));

var _expect = _interopRequireDefault(require("expect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema - type', function () {
  it('typed array', function () {
    const schema = new _SimpleSchema.SimpleSchema({
      ta: {
        type: Uint8Array
      }
    });
    (0, _expectErrorLength.default)(schema, {
      ta: new Uint8Array(100000000)
    }).toEqual(0);
  });
  it('array of objects', function () {
    (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _friendsSchema.default, {
      $set: {
        enemies: [{
          name: 'Zach',
          traits: [{
            name: 'evil',
            weight: 'heavy'
          }]
        }]
      }
    }, {
      modifier: true
    }).toEqual(1);
    (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _friendsSchema.default, {
      $set: {
        enemies: [{
          name: 'Zach',
          traits: [{
            name: 'evil',
            weight: 9.5
          }]
        }]
      }
    }, {
      modifier: true
    }).toEqual(0);
  });
  describe('custom type', function () {
    it('valid', function () {
      const schema = new _SimpleSchema.SimpleSchema({
        address: {
          type: _Address.default
        },
        createdAt: {
          type: Date
        },
        file: {
          type: Uint8Array
        }
      });
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, schema, {
        createdAt: new Date(),
        file: new Uint8Array([104, 101, 108, 108, 111]),
        address: new _Address.default('San Francisco', 'CA')
      }).toEqual(0);
    });
    it('invalid', function () {
      const schema = new _SimpleSchema.SimpleSchema({
        address: {
          type: _Address.default
        },
        createdAt: {
          type: Date
        },
        file: {
          type: Uint8Array
        }
      });
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, schema, {
        createdAt: {},
        file: {},
        address: {}
      }).toEqual(3);
    });
  });
  it('weird type', function () {
    (0, _expect.default)(function () {
      new _SimpleSchema.SimpleSchema({
        // eslint-disable-line no-new
        name: {
          type: Array[Object]
        }
      });
    }).toThrow();
  });
  describe('string', function () {
    it('normal', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        string: 'test'
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        string: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        string: 1
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        string: {
          test: 'test'
        }
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        string: ['test']
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        string: new Date()
      }).toEqual(1);
    });
    it('modifier with $setOnInsert', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          string: 'test'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          string: true
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          string: 1
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          string: {
            test: 'test'
          }
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          string: ['test']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          string: new Date()
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('modifier with $set', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          string: 'test'
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          string: true
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          string: 1
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          string: {
            test: 'test'
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          string: ['test']
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          string: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: 'test'
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: true
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: 1
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: {
            test: 'test'
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: ['test']
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $addToSet', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedStringsArray: 'test'
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedStringsArray: true
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedStringsArray: 1
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedStringsArray: {
            test: 'test'
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedStringsArray: ['test']
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedStringsArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push + $each', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: {
            $each: ['test', 'test']
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: {
            $each: [true, false]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: {
            $each: [1, 2]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: {
            $each: [{
              test: 'test'
            }, {
              test: 'test2'
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: {
            $each: [['test'], ['test']]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedStringsArray: {
            $each: [new Date(), new Date()]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
    });
  });
  describe('boolean', function () {
    it('normal', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        boolean: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        boolean: false
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        boolean: 'true'
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        boolean: 0
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        boolean: {
          test: true
        }
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        boolean: [false]
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        boolean: new Date()
      }).toEqual(1);
    });
    it('modifier with $setOnInsert', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          boolean: true
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          boolean: false
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          boolean: 'true'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          boolean: 0
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          boolean: {
            test: true
          }
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          boolean: [false]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          boolean: new Date()
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('modifier with $set', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          boolean: true
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          boolean: false
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          boolean: 'true'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          boolean: 0
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          boolean: {
            test: true
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          boolean: [false]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          boolean: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: true
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: false
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: 'true'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: 0
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: {
            test: true
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: [false]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $addToSet', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          booleanArray: true
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          booleanArray: false
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          booleanArray: 'true'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          booleanArray: 0
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          booleanArray: {
            test: true
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          booleanArray: [false]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          booleanArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push + $each', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: {
            $each: [true, false]
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: {
            $each: ['true', 'false']
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: {
            $each: [0, 1]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: {
            $each: [{
              test: true
            }, {
              test: false
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: {
            $each: [[true], [false]]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          booleanArray: {
            $each: [new Date(), new Date()]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
    });
  });
  describe('number', function () {
    it('normal', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: 1
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: 0
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: 'test'
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: false
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: {
          test: 1
        }
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: [1]
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: new Date()
      }).toEqual(1); // NaN does not count

      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        number: NaN
      }).toEqual(1);
    });
    it('modifier with $setOnInsert', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: 1
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: 0
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: 'test'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: false
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: {
            test: 1
          }
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: [1]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: new Date()
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1); // NaN does not count

      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          number: NaN
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('modifier with $set', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: 1
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: 0
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: 'test'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: false
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: {
            test: 1
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: [1]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1); // NaN does not count

      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          number: NaN
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: 1
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: 0
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: 'test'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: false
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            test: 1
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: [1]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1); // NaN does not count

      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: NaN
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $addToSet', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: 1
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: 0
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: 'test'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: false
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: {
            test: 1
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: [1]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1); // NaN does not count

      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          allowedNumbersArray: NaN
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push + $each', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            $each: [0, 1]
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            $each: ['test', 'test']
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            $each: [false, true]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            $each: [{
              test: 1
            }, {
              test: 2
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            $each: [[1], [2]]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            $each: [new Date(), new Date()]
          }
        }
      }, {
        modifier: true
      }).toEqual(2); // NaN does not count

      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          allowedNumbersArray: {
            $each: [NaN, NaN]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
    });
  });
  describe('date', function () {
    it('normal', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        date: new Date()
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        date: 'test'
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        date: false
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        date: {
          test: new Date()
        }
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        date: [new Date()]
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        date: 1
      }).toEqual(1);
    });
    it('modifier with $setOnInsert', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          date: new Date()
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          date: 'test'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          date: false
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          date: {
            test: new Date()
          }
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          date: [new Date()]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          date: 1
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('modifier with $set', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          date: new Date()
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          date: 'test'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          date: false
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          date: {
            test: new Date()
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          date: [new Date()]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          date: 1
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: 'test'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: false
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: {
            test: new Date()
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: [new Date()]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: 1
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $addToSet', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          dateArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          dateArray: 'test'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          dateArray: false
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          dateArray: {
            test: new Date()
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          dateArray: [new Date()]
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $addToSet: {
          dateArray: 1
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('modifier with $push + $each', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: {
            $each: [new Date(), new Date()]
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: {
            $each: ['test', 'test']
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: {
            $each: [false, true]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: {
            $each: [{
              test: new Date()
            }, {
              test: new Date()
            }]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: {
            $each: [[new Date()], [new Date()]]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $push: {
          dateArray: {
            $each: [1, 2]
          }
        }
      }, {
        modifier: true
      }).toEqual(2);
    });
  });
  describe('array', function () {
    it('normal', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: []
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: [true]
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: [false]
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: 'test'
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: false
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: {
          test: []
        }
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: ['test']
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        booleanArray: 1
      }).toEqual(1);
    });
    it('modifier with $setOnInsert', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          booleanArray: [true, false]
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          booleanArray: 'test'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          booleanArray: false
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          booleanArray: {
            test: [false]
          }
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          booleanArray: new Date()
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $setOnInsert: {
          booleanArray: 1
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('modifier with $set', function () {
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          booleanArray: [true, false]
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          booleanArray: 'test'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          booleanArray: false
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          booleanArray: {
            test: false
          }
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          booleanArray: new Date()
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorOfTypeLength.default)(_SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE, _testSchema.default, {
        $set: {
          booleanArray: 1
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
    it('ignores slice', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $push: {
          booleanArray: {
            $each: [false, true],
            $slice: -5
          },
          dateArray: {
            $each: [new Date(), new Date()],
            $slice: -5
          },
          allowedStringsArray: {
            $each: ['tuna', 'fish'],
            $slice: -5
          },
          allowedNumbersArray: {
            $each: [2, 1],
            $slice: -5
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('ignores pull', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $pull: {
          booleanArray: 'foo',
          dateArray: 'foo',
          allowedStringsArray: 'foo',
          allowedNumbersArray: 200
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('ignores pull + $each', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $pull: {
          booleanArray: {
            $each: ['foo', 'bar']
          },
          dateArray: {
            $each: ['foo', 'bar']
          },
          allowedStringsArray: {
            $each: ['foo', 'bar']
          },
          allowedNumbersArray: {
            $each: [200, 500]
          }
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('ignores pullAll', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $pullAll: {
          booleanArray: ['foo', 'bar'],
          dateArray: ['foo', 'bar'],
          allowedStringsArray: ['foo', 'bar'],
          allowedNumbersArray: [200, 500]
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('ignores pop', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $pop: {
          booleanArray: 1,
          dateArray: 1,
          allowedStringsArray: 1,
          allowedNumbersArray: 1
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $pop: {
          booleanArray: -1,
          dateArray: -1,
          allowedStringsArray: -1,
          allowedNumbersArray: -1
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
  });
});