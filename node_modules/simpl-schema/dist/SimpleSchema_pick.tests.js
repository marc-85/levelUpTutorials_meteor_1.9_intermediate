"use strict";

var _SimpleSchema = require("./SimpleSchema");

var _expect = _interopRequireDefault(require("expect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema', function () {
  it('pick', function () {
    const schema = new _SimpleSchema.SimpleSchema({
      foo: {
        type: Object
      },
      'foo.bar': {
        type: String
      },
      fooArray: {
        type: Array
      },
      'fooArray.$': {
        type: Object
      },
      'fooArray.$.bar': {
        type: String
      }
    });
    let newSchema = schema.pick('foo');
    (0, _expect.default)(Object.keys(newSchema.schema())).toEqual(['foo', 'foo.bar']);
    newSchema = schema.pick('fooArray');
    (0, _expect.default)(Object.keys(newSchema.schema())).toEqual(['fooArray', 'fooArray.$', 'fooArray.$.bar']);
    newSchema = schema.pick('foo', 'fooArray');
    (0, _expect.default)(Object.keys(newSchema.schema())).toEqual(['foo', 'foo.bar', 'fooArray', 'fooArray.$', 'fooArray.$.bar']);
    newSchema = schema.pick('blah');
    (0, _expect.default)(Object.keys(newSchema.schema())).toEqual([]);
  });
  it('error when you do not pick the parent', () => {
    const schema = new _SimpleSchema.SimpleSchema({
      level1: {
        type: Object
      },
      'level1.level2': {
        type: Boolean
      }
    });
    (0, _expect.default)(() => {
      schema.pick('level1.level2');
    }).toThrow('"level1.level2" is in the schema but "level1" is not');
  });
});