"use strict";

var _testSchema = _interopRequireDefault(require("./testHelpers/testSchema"));

var _expectErrorLength = _interopRequireDefault(require("./testHelpers/expectErrorLength"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema - min', function () {
  describe('normal', function () {
    it('string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxString: 'longenough'
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxString: 'short'
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxString: ''
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxStringArray: ['longenough', 'longenough']
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxStringArray: ['longenough', 'short']
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxStringArray: ['short', 'short']
      }).toEqual(2);
    });
    it('number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberExclusive: 20
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberExclusive: 10
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberInclusive: 20
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberInclusive: 10
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumber: 10
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumber: 9
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberCalculated: 10
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxNumberCalculated: 9
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minZero: -1
      }).toEqual(1);
    });
    it('date', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDate: new Date(Date.UTC(2013, 0, 1))
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDate: new Date(Date.UTC(2012, 11, 31))
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDateCalculated: new Date(Date.UTC(2013, 0, 1))
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        minMaxDateCalculated: new Date(Date.UTC(2012, 11, 31))
      }).toEqual(1);
    });
  });
  describe('modifier with $setOnInsert', function () {
    it('string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxString: 'longenough'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxString: 'short'
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxStringArray: ['longenough', 'longenough']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxStringArray: ['longenough', 'short']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxStringArray: ['short', 'short']
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(2);
    });
    it('number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumber: 10
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumber: 9
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumberCalculated: 10
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxNumberCalculated: 9
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minZero: -1
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
    it('date', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDate: new Date(Date.UTC(2013, 0, 1))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDate: new Date(Date.UTC(2012, 11, 31))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDateCalculated: new Date(Date.UTC(2013, 0, 1))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $setOnInsert: {
          minMaxDateCalculated: new Date(Date.UTC(2012, 11, 31))
        }
      }, {
        modifier: true,
        upsert: true
      }).toEqual(1);
    });
  });
  describe('modifier with $set or $inc', function () {
    it('string', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxString: 'longenough'
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxString: 'short'
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxStringArray: ['longenough', 'longenough']
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxStringArray: ['longenough', 'short']
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxStringArray: ['short', 'short']
        }
      }, {
        modifier: true
      }).toEqual(2);
    });
    it('number', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumber: 10
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumber: 9
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumberCalculated: 10
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxNumberCalculated: 9
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minZero: -1
        }
      }, {
        modifier: true
      }).toEqual(1); // Should not be invalid because we don't know what we're starting from

      (0, _expectErrorLength.default)(_testSchema.default, {
        $inc: {
          minZero: -5
        }
      }, {
        modifier: true
      }).toEqual(0);
    });
    it('date', function () {
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDate: new Date(Date.UTC(2013, 0, 1))
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDate: new Date(Date.UTC(2012, 11, 31))
        }
      }, {
        modifier: true
      }).toEqual(1);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDateCalculated: new Date(Date.UTC(2013, 0, 1))
        }
      }, {
        modifier: true
      }).toEqual(0);
      (0, _expectErrorLength.default)(_testSchema.default, {
        $set: {
          minMaxDateCalculated: new Date(Date.UTC(2012, 11, 31))
        }
      }, {
        modifier: true
      }).toEqual(1);
    });
  });
});